module NETSNMP
  class Session
    @transport: _Transport
    @version: 0 | 1 | 3
    @community: String?

    def close: () -> void

    def build_pdu: (pdu_type, *untyped) -> PDU

    def send: (PDU) -> PDU

    private

    def initialize: (?version: snmp_version, ?community: String, **untyped) -> untyped
   
    def validate: (?host: String?, ?port: Integer, ?proxy: _Transport, ?timeout: Integer, **untyped) -> void

    class Transport
      def initialize: (String host, Integer port, timeout: Integer) -> untyped
      def close: () -> void
      def send: (String payload) -> String
      def write: (String) -> void
      def recv: () -> void

      private

      def wait: (:wait_readable | :wait_writable) -> void
    end
  end

  interface _Transport
    def close: () -> void
    def send: (String payload) -> String
  end
end