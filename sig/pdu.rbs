module NETSNMP
  type pdu_type = :get | :getnext | :set | :inform | :trap | :response

  class PDU

    MAXREQUESTID: Integer

    attr_reader varbinds: Array[Varbind]
    attr_reader type: Integer
    attr_reader version: Integer
    attr_reader community: String?
    attr_reader request_id: Integer

    @error_index: Integer
    @error_status: Integer

    def self.decode: (String | OpenSSL::ASN1::ASN1Data der, **untyped vars) -> instance

    def self.build: (pdu_type, **untyped) -> instance


    def to_asn: () -> OpenSSL::ASN1::ASN1Data

    def to_der: () -> String

    def to_hex: () -> String

    def add_varbind: (oid: String, **untyped varbind_options) -> void
    alias << add_varbind

    private

    def initialize: (
      type: Integer,
      version: Integer,
      community: String?,
      ?request_id: Integer,
      ?error_status: Integer,
      ?error_index: Integer,
      ?varbinds: Array[varbind_options]
    ) -> void

    def encode_headers_asn: () -> [OpenSSL::ASN1::Integer, OpenSSL::ASN1::OctetString]

    def check_error_status: (Integer) -> void
  end
end