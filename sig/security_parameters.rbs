module NETSNMP
  class SecurityParameters
    include Loggable

    type security_level = 0 | 1 | 3

    IPAD: String
    OPAD: String
    TIMELINESS_THRESHOLD: Integer

    @auth_password: String?
    @priv_protocol: Symbol?
    @priv_password: String?
    @digest: OpenSSL::Digest
    @encryption: (Encryption::AES | Encryption::DES)?

    attr_reader security_level: Integer
    attr_reader username: String
    attr_reader engine_id: String
    attr_reader auth_protocol: Symbol?

    def engine_id=: (String id) -> void

    def encode: (PDU pdu, salt: OpenSSL::ASN1::ASN1Data, engine_time: Integer, engine_boots: Integer) -> [OpenSSL::ASN1::ASN1Data, OpenSSL::ASN1::ASN1Data]

    def decode: (OpenSSL::ASN1::ASN1Data | String der, salt: String, engine_time: Integer, engine_boots: Integer, ?security_level: Integer) -> OpenSSL::ASN1::ASN1Data

    def sign: (String message) -> String?

    def verify: (String stream, String salt, ?security_level: Integer?) -> void

    def must_revalidate?: () -> bool

    private

    def initialize: (
      username: String,
      ?engine_id: String,
      ?security_level: security_level | :noauth | :auth_no_priv | :auth_priv | nil,
      ?auth_protocol: Symbol | nil,
      ?auth_password: String | nil,
      ?priv_protocol: Symbol | nil,
      ?priv_password: String | nil,
      **untyped options
    ) -> void

    def auth_key: () -> String

    def priv_key: () -> String

    def check_parameters: () -> void

    def localize_key: (String key) -> String

    def passkey: (String password) -> String

    def digest: () -> OpenSSL::Digest

    def encryption: () -> (Encryption::AES | Encryption::DES)?

    def authorizable?: () -> bool
  end
end
